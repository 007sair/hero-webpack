/**
Usage:
------

// input
@include b(block) { 
    background: red; 
    @include e(header){ 
        font-size: 14px; 
        @include m(css) { 
            font-size: 18px; 
        } 
    }; 
    @include m(book) { 
        color: blue; 
        @include e(kindlebook) { 
            background: gray; 
        } 
    } 
}

// output
.block {
    background: red;
}

.block-header {
    font-size: 14px;
}

.block-header--css {
    font-size: 18px;
}

.block--book {
    color: blue;
}

.block--book .block-kindlebook {
    background: gray;
}

 ***/


 $elementSeparator: '-';
 $modifierSeparator: '--';
 
 @function containsModifier($selector) {
     $selector: selectorToString($selector);
     @if str-index($selector, $modifierSeparator) {
         @return true;
     }
     @else {
         @return false;
     }
 }
 
 @function selectorToString($selector) {
     $selector: inspect($selector); //cast to string 
     
     $selector: str-slice($selector, 2, -2); //remove brackets 
     @return $selector; 
 } 
     
 @function getBlock($selector) { 
     $selector: selectorToString($selector); 
     $modifierStart: str-index($selector, $modifierSeparator) - 1; 
     @return str-slice($selector, 0, $modifierStart); 
 } 
 
 @mixin b($block) { 
     .#{$block} { 
         @content; 
     } 
 }
 
 @mixin e($element) {
     $selector: &;
     @if containsModifier($selector) {
         $block: getBlock($selector);
         @at-root {
             #{$selector} {
                 #{$block+$elementSeparator+$element} {
                     @content;
                 }
             }
         }
     }
     @else {
         @at-root {
             #{$selector+$elementSeparator+$element} {
                 @content;
             }
         }
     }
 }
 
 @mixin m($modifier) {
     @at-root {
         #{&}#{$modifierSeparator+$modifier} {
             @content;
         }
     }
 }